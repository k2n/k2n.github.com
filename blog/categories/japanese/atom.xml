<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: japanese | Code Critique]]></title>
  <link href="http://k2n.github.com/blog/categories/japanese/atom.xml" rel="self"/>
  <link href="http://k2n.github.com/"/>
  <updated>2012-06-19T16:54:06-07:00</updated>
  <id>http://k2n.github.com/</id>
  <author>
    <name><![CDATA[Kenji Nakamura]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JBoss ModeShape]]></title>
    <link href="http://k2n.github.com/blog/2012/06/18/jboss-modeshape/"/>
    <updated>2012-06-18T16:39:00-07:00</updated>
    <id>http://k2n.github.com/blog/2012/06/18/jboss-modeshape</id>
    <content type="html"><![CDATA[<h1>JBoss ModeShapeとは</h1>

<ul>
<li>JCR2.0 <a href="http://www.jcp.org/en/jsr/detail?id=283">JSR-283</a>の実装の一つ。</li>
<li>LGPL2.1のライセンスで配布されているため、商用製品への組み込みが可能。（但し制限あり。<a href="http://ja.wikipedia.org/wiki/GNU_Lesser_General_Public_License">参考</a>)</li>
<li>JCR2.0で定められている必須機能の全てと、オプショナル機能のほとんどを実装している。

<h2>JCR-SQL2の拡張</h2>

<p>JCR2.0で定義されている、JCR-SQL2とJCR-QOM（Query Object Model)、JCR1.0で定義されていたJCR-SQLとXPath、さらに全文検索的なクエリが可能になっている。</p></li>
<li>JCR-SQL2については、定義されている、<code>LEFT OUTER JOIN</code>, <code>RIGHT OUTER JOIN</code>, <code>INNER JOIN</code>に加え、<code>FULL OUTER JOIN</code>と<code>CROSS JOIN</code>をサポートしている。</li>
<li>複数のリザルトセットに対して、<code>INTERSECT</code>, <code>UNION</code>, <code>EXCEPT</code>オペレーションを適用することができる。標準SQL同様、リザルトセット群は同一のカラムを保持していることが前提である。<code>UNION</code>は両者の合成、<code>INTERSECT</code>は両者の差分、<code>EXCEPT</code>は両者に共通の部分を返す。<code>ALL</code>キーワードをつけていない場合、重複行は削除される。</li>
<li><code>SELECT DISTINCT</code>で、重複を削除することができる。</li>
<li><code>LIMIT count</code>句で返される行数の上限を規定することができる。<code>OFFSET number</code>を指定するとスキップする行数を指定することができる。</li>
<li><code>DEPTH</code>, <code>PATH</code>でそれぞれ、深さ、幅を指定することが可能。文法は、JCR-SQL2で定義されている<code>NAME</code>, <code>LOCALNAME</code>と同様の使い方。</li>
<li><code>REFERENCE</code>が動的オペランドとして追加されている。使い方はJCR2.0の<code>PropertyValue</code>と同様で、<code>REFERENCE([&lt;selectorName&gt;.]&lt;propertyName&gt;)</code> で指定したセレクタ、プロパティ名による制限をかけることができる。</li>
<li><code>IN</code>と<code>NOT IN</code>句で、静的なオペランドを複数列挙する方法をサポートしている。 例：<code>WHERE .... [my:type].[prop1] IN (3,5,7,10,11)...</code></li>
<li><code>BETWEEN</code>句で、よりわかりやすく簡潔な範囲の指定が可能。例：<code>WHERE ... [my:type].[prop1] BETWEEN 3 EXCLUSIVE AND 10...</code></li>
<li>簡単な四則演算が数字ベースのクライテリアとorder-by句で可能。例：<code>... WHERE SCORE(type1) + SCORE(type2) &gt; 1.0</code>, <code>... ORDER BY (SCORE(type1) * SCORE(type2)) ASC, LENGTH(type2.property1) DESC</code>など</li>
<li>静的なオペランドをとることが出来る場所であればどこでも、（相関関係のない）サブクエリを使用することが可能。サブクエリの入れ子もサポートされている。サブクエリは単一のカラムを返す必要があり、各行の値がリテラル値として扱われる。サブクエリを使用している句が単一値だけを必要としている場合（比較など）は最初の行の値だけが用いられる。例：<code>WHERE ... [mytype].[prop1] IN ( SELECT [my:prop2] FROM [my:type2] WHERE [my:prop3] &lt; '1000') AND ...</code></li>
<li>擬似カラムのサポート

<h2>コネクタ</h2>

<p>様々なバックエンドデータストレージをサポートするコネクタが提供されている。</p></li>
<li>インメモリコネクタ：データを一時的なメモリに格納する。小中規模のデータを、一時的に格納しておく用途、キャシュなどに適している。</li>
<li>ファイルシステムコネクタ：<code>nt:file</code>と<code>nt:folder</code>標準ノードをファイルシステムに格納するコネクタ。この二つのタイプで指定されている以外のプロパティが存在する場合、設定によって、ロギング、無視、エラー、格納の4通りの振舞いを選ぶことができる。格納する場合、<code>.modeshape</code>拡張子のテキストファイルに情報が書き込まれる。</li>
<li>データベースコネクタ：JPA(Hibernate)を下層のレイヤーとして用い、RDBMSに格納するためのコネクタ。グラフ構造のデータを格納するのに最適化されたスキーマをRDB上に作成しデータを格納する。</li>
<li>JCRコネクタ：他のJCRリポジトリをストレージとして用いるコネクタ。これを利用して、複数のリポジトリを連携させることも可能である。</li>
<li>フェデレーションコネクタ：複数のリポジトリを束ねて、一つの仮想的なツリーを構築するコネクタ。例えば、下記の二つのリポジトリが存在するとする。
<code>
+- a
|  +- i
|  +- j
+- b
 +- k
 +- m
 +- n
</code></li>
</ul>


<p>```
+- foo
   +- bar
   |  +- baz
   |  |  +- taz
   |  |  +- zaz
   |  +- raz
   +- bum</p>

<pre><code>  +- bot
</code></pre>

<p>```</p>

<p>この二つのリポジトリ（物理的なストレージが異なっていても構わない）を下記設定で統合する。</p>

<p><code>
/ =&gt; /                         for source "S1"
/alpha =&gt; /foo/bar             for source "S2"
</code></p>

<p>すると、統合した結果下記のような一つの仮想的なツリーを構築できる。</p>

<p>```
+- a
|  +- i
|  +- j
+- b
|  +- k
|  +- m
|  +- n
+- alpha
   +- baz</p>

<pre><code>  +- taz
  |  +- zaz
  +- raz
</code></pre>

<p><code>``
マッピング定義で、</code>/foo/bum`は指定されていないので統合されたツリーには反映されていないことに注目。</p>

<ul>
<li>Subversionコネクタ：Subversionの内容を、<code>nt:folder</code>と<code>nt:file</code>ノードを使用して表現するコネクタ。リード・ライトの両方が可能。</li>
<li>JBoss Cacheコネクタ：JBoss Cache（クラスタリングソリューション：JBoss Infinispanがその役割を後継している）を用いたJCRリポジトリを生成するためのコネクタ。新規ではInfinispanを用いるべき。</li>
<li>Infinispanコネクタ：複数のノードのヒープメモリを仮想的な一つのメモリとして提供するInfinispanをJCRリポジトリのストレージとして利用するためのコネクタ。</li>
<li>Diskコネクタ：ファイルシステム上にModeShape固有のファイルフォーマットで永続化するJCRリポジトリ。ファイルシステムコネクタは、ファイルシステム上に既に存在するデータをJCRリポジトリとしてアクセス可能にすることに重きがおかれているが、このコネクタはファイルシステム上にJCRデータを効率的に格納することを目的として作られている。</li>
<li>JDBCメタデータコネクタ：RDBのカタログ、スキーマ、テーブル構造などのメタデータをJCRリポジトリとして表現するリードオンリーのコネクタ。下記のようなイメージ
```
/ (root node)

<ul>
<li><catalog name> - DB上のカタログごとにノードが作成される。

<ul>
<li><schema name> - カタログ内のスキーマごとにノードが作成される。

<ul>
<li>tables - スキーマ内の全てのテーブルの親ノード
|   + <table name> - テーブル名
|      + <column name> - カラム名</li>
<li>procedures - スキーマ内の全てのプロシジャの親ノード

<ul>
<li><procedure name> - スキーマ内のプロシジャごとにノードが作成される
```

<h2>シーケンサー</h2>

<p>シーケンサーは、JPEG, GIF, PNGなどのイメージファイル、XMLスキーマ、XMLファイル、Javaクラス、Javaソースコード、CSV、MS Office、MP3など、様々なフォーマットのファイルをJCRリポジトリに格納する際に、有益な情報を抽出し、ノードとプロパティにそのメタ情報を格納するインターフェース。POJOとして実装できるので、カスタムのシーケンサーを追加することが可能。
例えば、Microsoft Word, Excel, Powerpointファイルからは、下記の情報を抽出することが可能。
```
[msoffice:metadata] > nt:unstructured, mix:mimeType</p></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>msoffice:title (string)</li>
<li>msoffice:subject (string)</li>
<li>msoffice:author (string)</li>
<li>msoffice:keywords (string)</li>
<li>msoffice:comment (string)</li>
<li>msoffice:template (string)</li>
<li>msoffice:last_saved_by (string)</li>
<li>msoffice:revision (string)</li>
<li>msoffice:total_editing_time (long)</li>
<li>msoffice:last_printed (date)</li>
<li>msoffice:created (date)</li>
<li>msoffice:saved (date)</li>
<li>msoffice:pages (long)</li>
<li>msoffice:words (long)</li>
<li>msoffice:characters (long)</li>
<li>msoffice:creating_application (string)</li>
<li>msoffice:thumbnail (binary)</li>
</ul>
</li>
</ul>


<p>// PowerPoint specific data
  + msoffice:slide (msoffice:pptslide) sns</p>

<p>// Excel specific data
  - msoffice:full_content (string)
  - msoffice:sheet_name (string) multiple</p>

<p>[msoffice:pptslide]
  - msoffice:title (string)
  - msoffice:text (string)
  - msoffice:thumbnail (binary)  <br/>
```</p>

<h1>JBossアプリケーションサーバとの関係</h1>

<p><a href="http://stackoverflow.com/questions/6392815/what-does-modeshape-offer-that-jackrabbit-doesnt/6399032#6399032">StackOverflowにおける主開発者Randall Hauchからの返答によると</a>、</p>

<ul>
<li>HibernateやJGroupsなど、JBossプロジェクトの技術は利用しているが、JBoss ASに依存しているわけではない。</li>
<li>J2EEサーバだけでなく、J2SEアプリケーションにModeShapeを組み込むことも可能である。</li>
<li>但し、JBoss ASに簡単にディプロイできるような工夫はされている。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRaSH]]></title>
    <link href="http://k2n.github.com/blog/2012/06/05/crash/"/>
    <updated>2012-06-05T12:26:00-07:00</updated>
    <id>http://k2n.github.com/blog/2012/06/05/crash</id>
    <content type="html"><![CDATA[<p>JCRを使う際、対話的にリポジトリを操作できるUIがあると便利である。筆者がいくつか試した末、気に入ったのは下記の二つである。</p>

<ul>
<li><a href="http://www.subshell.com/en/toromiro/toromiro104.html">Toromiro</a> ... ドイツのSubShellで開発されている、Eclipse RCPベースのGUI。商用で600ユーロとそれなりの価格。30日間の試用が可能。</li>
<li><a href="http://julienviet.com/crash/#home">CRaSH</a> ... フランスのポータルフレームワーク、eXoの開発者が公開している、Java+Groovyで記述された対話的シェル。LGPLで配布されている。</li>
</ul>


<p>CRaSHは拡張性の高さが売りで、groovyスクリプトを書くだけでコマンドを拡張することができる。また、<a href="https://github.com/diva-america/crash/tree/master/jcr">JCRリポジトリ用のコマンド</a>も用意されている。
最新版は1.1.0-cr1だが、いくつか問題点が散見されたので、コードをハックすることにした。</p>

<h2>対話式コマンドラインの操作性改善</h2>

<p>jlineはGNU ReadlineやBSD editlineのように、対話式コマンドラインを提供するライブラリである。jlineはほぼ100%Javaで実装されている。（Windows用のDLLが含まれているらしい）長らく開発が進んでいなかったのだが、scalaシェルで使われていることもあり、最近<a href="https://github.com/jline/jline2">jline2</a>として拡張する動きがある。</p>

<p>最初CRaSH 1.0.0を使ったときは、古いバージョンのjlineが使われていたため、emacsやviのキーバインディングがエミュレートされておらず、使いづらさを感じた。そこでハックすることとした。</p>

<h3>JavaEditline</h3>

<p>まずは、editlineのjava JNIラッパーである、<a href="https://github.com/bmc/javaeditline">javaeditline</a>を使って、<a href="https://github.com/diva-america/crash/tree/javaeditline">jlineを置き換えるハック</a>を行った。editlineを使うためにはJNIライブラリを配布する必要があり、通常は手作業で<code>LD_LIBRARY_PATH</code>(linux) <code>/Library/Java/Extensions</code>(mac os x)にJNIライブラリをコピーしなければならない。これは不親切なので、CRaSHで、実行用jarファイルを作成するのに使われている<a href="https://github.com/diva-america/crash/blob/javaeditline/shell/core/src/main/assembly/standalone.xml">maven assembly plugin</a>の代わりに、<a href="http://one-jar.sourceforge.net/">One JAR</a>の<a href="https://github.com/k2n/onejar-maven-plugin">maven plugin</a>を使うことにした。</p>

<h4>onejar-maven-pluginのハック</h4>

<p>JavaeditlineのJNIライブラリは、linux 64bit, 32bit, mac os x版をそれぞれの環境でmakeし、同梱することにした。が、オリジナルのonejar-maven-pluginは全て<code>binlib/</code>にコピーするため、アーキテクチャが異なる同名のライブラリを共存させることができない。<a href="http://code.google.com/p/onejar-maven-plugin/issues/detail?id=25&amp;q=binlib">既知の問題</a>なのだが、パッチが適用されていないため、githubでフォークし対応することとした。
具体的には、
```
binlib +-- linux32 -- libjavaeditlines.so</p>

<pre><code>   |
   +-- linux64 -- libjavaeditlines.so
   |
   +-- macosx -- dynjavaeditlines.jnilib
</code></pre>

<p>```
の階層構造を保ったまま実行jarにアーカイブしたい。（OneJar側でこのような構造を期待されているので）
そこで、下記のようなロジックを加えた。</p>

<p>``` java
// Add native libraries</p>

<pre><code>    if (binlibs != null) {
        for (FileSet eachFileSet : binlibs) {
            File baseDir = new File(eachFileSet.getDirectory());
            List&lt;File&gt; includedFiles = toFileList(eachFileSet);
            debug("Adding [%s] native libraries...", includedFiles.size());
            for (File eachIncludedFile : includedFiles) {
                File parent = new File(eachIncludedFile.getParent());
                String relativePath = baseDir.toURI().relativize(parent     // &lt;== URI.relativizeを活用
                        .toURI()).getPath();
                addToZip(eachIncludedFile, "binlib/" + relativePath, out);
            }
        }
    }
</code></pre>

<p>```
ポイントはURI.relativezeメソッドの活用である。JDK7ではFileクラスにも同様のメソッドが導入されたが、この方法で古いJDKでも動作させることができる。但し、この相対化は同じ階層の先祖と子孫の間でしか使えないことに注意。</p>

<p>javaeditline対応版をビルドするには、<a href="https://github.com/diva-america/crash/tree/javaeditline">Fork版CRaSH</a>をクローンして、<code>javaeditilne</code>にブランチを切り替えて、トップレベルから<code>mvn package</code>を実行すればよい。</p>

<p>以上で、無事editlineをjlineの代わりに使うことができた。もちろん、稼働するOSには<code>apt-get</code>などでeditlineを予めインストールしておく必要がある。（mac os xはプリインストールされているので作業は不要）
これで、<code>$HOME/.inputrc</code>に下記のようなエントリーを入れることで、キーバインディングをVi風味に変更することが可能となる。
<code>
set editing-mode vi
</code>
editlineが見つからない場合は、jlineをフォールバックとして使用する動作となっている。
jline版に対するディグレッションとして、サブコマンド（例えば<code>system</code>のサブコマンドには<code>propset</code>, <code>propls</code>などがある）のタブキーによる補完が動かない。</p>

<h3>jlineのアップグレード</h3>

<p>土曜にjavaeditline版を作り、翌日サブコマンドの補完問題をfixしようかと考えていたところ、jlineでもviモードを実装中という情報を見つけ、単純にjlineをアップグレードすればいいのではないかという案を思いついた。そこでeditline版はまずここまでとし、jlineを見て見ることにした。</p>

<p>crashの1.1.0-cr1ではシェル周りの抽象化が進められ（だからjavaeditlineへの置き換えも容易だった)るとともに、1.0.0で使われていた古いバージョンのjlineの代わりに、<code>jline 2.6</code>が使われているが、これにはバグがあり、<code>$HOME/.inputrc</code>でviモードをセットしていると、一切キー入力を受け付けない。<a href="https://jira.exoplatform.org/browse/CRASH-87">CRaSHにバグ報告</a>はしたのだが、$HOME/.inputrcはeditlineでも参照されており、この問題の回避のためにコメントアウトするわけにも行かないので、最新の<a href="https://github.com/diva-america/jline2">jline</a>を用いてローカルリポジトリに<code>jline-2.7-SNAPSHOT</code>としてデプロイし、これを使うことにした。このアップグレードにより無事viモードをjlineで使えるようになった。</p>

<h2>JCR Jackrabbitスタンドアローン版の作成</h2>

<p>CRaSHはWARとスタンドアローンJARの二つを成果物として出力しているが、<code>shell/core/</code>の下のスタンドアローンjarはJCRコマンドが含まれていない。そこで<a href="https://github.com/diva-america/crash/commit/328ab7ffcdf752dfbdbbd8bfe5df8cc2190ab625">maven assembly pluginのstandalone.xmlをjcr/jackrabbitに追加</a>して、JackRabbit用のスタンドアローンJARも作成するようにハックした。</p>

<p><a href="https://github.com/diva-america/crash/tree/master-customized-for-diva">カスタマイズブランチ</a>に切替え、<code>mvn package</code>でビルドすれば、<code>jcr/jackrabbit/target</code>の下にスタンドアローン版が作成される。</p>

<h2>CRaSHの実行イメージ</h2>

<p>以上の修正で、JackRabbitリポジトリにアクセスできるようになった。操作イメージは下記のようになる。</p>

<h3>起動</h3>

<p><code>
$ mvn package
...
$ cd jcr/jackrabbit/target
$ java -jar crsh.jcr.jackrabbit-1.1.0-cr1-SNAPSHOT-standalone.jar
</code></p>

<h3>コンソール</h3>

<p>```
1010 [main] INFO org.crsh.standalone.Bootstrap - Booting crash with classpath=[] and mounts=[]
1079 [main] INFO org.crsh.plugin.PluginManager - Loaded plugin Plugin[type=CRaSHShellFactory,interface=ShellFactory]
1082 [main] INFO org.crsh.plugin.PluginManager - Loaded plugin Plugin[type=ProcessorIOHandler,interface=TermIOHandler]
1084 [main] INFO org.crsh.plugin.PluginManager - Loaded plugin Plugin[type=JaasAuthenticationPlugin,interface=AuthenticationPlugin]
1085 [main] INFO org.crsh.plugin.PluginManager - Loaded plugin Plugin[type=SimpleAuthenticationPlugin,interface=AuthenticationPlugin]
1109 [main] INFO org.crsh.plugin.PluginManager - Initialized plugin Plugin[type=CRaSHShellFactory,interface=ShellFactory]
1109 [main] INFO org.crsh.plugin.PluginManager - Initialized plugin Plugin[type=ProcessorIOHandler,interface=TermIOHandler]
1109 [main] INFO org.crsh.plugin.PluginManager - Initialized plugin Plugin[type=JaasAuthenticationPlugin,interface=AuthenticationPlugin]
1109 [main] INFO org.crsh.plugin.PluginManager - Initialized plugin Plugin[type=SimpleAuthenticationPlugin,interface=AuthenticationPlugin]</p>

<hr />

<p> .~      ~. |<code>``````,       .'.                   ..'''' |         |
|           |'''|'''''      .''</code>.              .''       |_________|
|           |    <code>.       .'      </code>.         ..'          |         |
 <code>.______.' |     </code>.   .'           `. ....''             |         | 1.1.0-cr1-SNAPSHOT</p>

<p>Follow and support the project on http://vietj.github.com/crash
Welcome to mba-001.local + !
It is Tue Jun 05 13:26:20 PDT 2012 now</p>

<p>% repo use org.apache.jackrabbit.repository.uri=file:///Users/kenjin/github/diva_lab/synapse/target/jackrabbit
jcr.repository.name : Jackrabbit
jcr.repository.vendor : Apache Software Foundation
jcr.repository.vendor.url : http://jackrabbit.apache.org/
jcr.repository.version : 2.4.1
jcr.specification.name : Content Repository API for Java(TM) Technology Specification
jcr.specification.version : 2.0
org.apache.jackrabbit.spi.commons.AdditionalEventInfo : true</p>

<p>% ws login -u admin -p admin default
128532 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - Starting repository...
128539 [main] INFO org.apache.jackrabbit.core.fs.local.LocalFileSystem - LocalFileSystem initialized at path /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/repository
128859 [main] INFO org.apache.jackrabbit.core.fs.local.LocalFileSystem - LocalFileSystem initialized at path /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/version
130676 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - initializing workspace 'default'...
130676 [main] INFO org.apache.jackrabbit.core.fs.local.LocalFileSystem - LocalFileSystem initialized at path /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/workspaces/default
132643 [main] INFO org.apache.jackrabbit.core.query.lucene.SearchIndex - Index initialized: /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/repository/index Version: 3
133153 [main] INFO org.apache.jackrabbit.core.query.lucene.SearchIndex - Index initialized: /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/workspaces/default/index Version: 3
133153 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - workspace 'default' initialized
133167 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - SecurityManager = class org.apache.jackrabbit.core.DefaultSecurityManager
133167 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - initializing workspace 'security'...
133167 [main] INFO org.apache.jackrabbit.core.fs.local.LocalFileSystem - LocalFileSystem initialized at path /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/workspaces/security
133929 [main] INFO org.apache.jackrabbit.core.query.lucene.SearchIndex - Index initialized: /Users/kenjin/github/diva_lab/synapse/target/jackrabbit/workspaces/security/index Version: 3
133929 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - workspace 'security' initialized
133931 [main] INFO org.apache.jackrabbit.core.DefaultSecurityManager - init: use Repository Login-Configuration for Jackrabbit
134138 [main] INFO org.apache.jackrabbit.core.RepositoryImpl - Repository started (5605ms)
134138 [main] INFO org.apache.jackrabbit.core.TransientRepository - Transient repository initialized
134573 [main] INFO org.apache.jackrabbit.core.security.authorization.acl.CachingEntryCollector - Creating cache with max size of: 5000
134574 [main] INFO org.apache.jackrabbit.core.TransientRepository - Session opened
Connected to workspace default
% ls
/
+-properties
| +-jcr:mixinTypes: [rep:AccessControllable]
| +-jcr:primaryType: rep:root
+-children
  +-/jcr:system
  +-/synapse:projects
  +-/rep:policy</p>

<p>% cd jcr:system/
/jcr:system
% ls
/jcr:system
+-properties
| +-jcr:primaryType: rep:system
+-children
  +-/jcr:system/jcr:versionStorage
  +-/jcr:system/jcr:activities
  +-/jcr:system/jcr:nodeTypes
```
あとは、<a href="http://julienviet.com/crash/#doc">CRaSHのマニュアル</a>で説明されているコマンドを駆使して、JCRリポジトリを操作することができる。</p>

<p>上記の例では、<code>repo use</code>のURIをfileスキームで指定したが、RMI, WebDAV, JNDIにリソースとしてバインドされているリポジトリに接続することも可能である。
<code>
% repo ls
Available JCR plugins:
jackrabbit - Jackrabbit JCR plugin - The command must at least have a URL parameter to be used in connecting to the repository.
To access a repository via RMI: 'repo use org.apache.jackrabbit.repository.uri=rmi://localhost:1099/jackrabbit'
To access a repository via JNDI: 'repo use org.apache.jackrabbit.repository.uri=jndi:java:comp/env/jcr/jackrabbit'
To access a repository via WebDAV: 'repo use org.apache.jackrabbit.repository.uri=http://localhost:8080/jackrabbit/repository/'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSD 2 CND Converter]]></title>
    <link href="http://k2n.github.com/blog/2012/06/01/xsd-2-cnd-converter/"/>
    <updated>2012-06-01T14:36:00-07:00</updated>
    <id>http://k2n.github.com/blog/2012/06/01/xsd-2-cnd-converter</id>
    <content type="html"><![CDATA[<p>JCRのNode Type Definitionを見ていると、XML Schemaと似ている点が多い。JCRが提供している階層構造のストレージはXMLの永続化に適していることが予想される。</p>

<p>となると、XML SchemaをCNDに変換できるのではないだろうかという予想のもと、調べてみると、Jackrabbitプロジェクトのコードベースの一部に、<a href="http://svn.apache.org/repos/asf/jackrabbit/sandbox/inactive/xsd2cnd/">xsd2cnd</a>というツールがあることがわかった。但し、このツールはJackrabbitの本流ではなく、sandbox、しかもinactiveの下に格納されていることから、長いことメンテされていない状況である。2008年に<code>sandbox/inactive</code>に移動されており、それ以来コードの更新がない。</p>

<p>確認のためローカルにダウンロードしてみると、なんとmavenがバージョン1である。懐かしい。maven2以降で動作させるためには、<code>project.xml</code>と<code>project.properties</code>を<code>pom.xml</code>に変換する必要がある。幸い、変換ツールが提供されている。
<code>
$ mvn2 one:convert
</code>
maven3ではもはや提供されていないようなので、maven2を使う必要がある。</p>

<p>動くように<a href="https://github.com/diva-america/xsd2cnd">ハック</a>して、XSDを変換してみたが、期待していた結果が得られなかった。このままでは使えず、改善が必要なようである。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCR Node Types]]></title>
    <link href="http://k2n.github.com/blog/2012/05/31/jcr-node-types/"/>
    <updated>2012-05-31T16:51:00-07:00</updated>
    <id>http://k2n.github.com/blog/2012/05/31/jcr-node-types</id>
    <content type="html"><![CDATA[<h1>JCRノードタイプ</h1>

<p>JCRコンテンツはノードとプロパティで構成される。ノードにはタイプ情報をもたせずに（=スキーマレス）格納することができる。その際のノードタイプは<code>nt:unstructured</code>である。一方、格納する情報に規約を与えたい場合は、ノードタイプを定義し、格納する情報がスキーマに合致していることを保証することで、プログラムからのアクセスを容易にするとともに情報の整合性を向上させることができる。</p>

<p>JCRは標準のノードタイプを定義している。本稿ではそれらについて解説する。</p>

<h1>CND (Compact Namespace and Node Type Definition)</h1>

<p>JCRのノードタイプ情報はXMLで表現することは可能であるが、boolean属性が多いため、冗長性が大きい。ノードタイプ情報をコンパクトに記述するため、CND記法が定義されている。</p>

<p>``` text CND文法 (EBNF記法)
 Cnd ::= {NamespaceMapping | NodeTypeDef}  // どちらかの要素の0個以上の繰り返し
 NamespaceMapping ::= '&lt;' Prefix '=' Uri '>'
 Prefix ::= String
 Uri ::= String
 NodeTypeDef ::= NodeTypeName [Supertypes] // 角括弧はオプショナルであることを示す</p>

<pre><code>             [NodeTypeAttribute {NodeTypeAttribute}] // 中括弧は0個以上の繰り返し
             {PropertyDef | ChildNodeDef} // どちらかの0個以上の繰り返し
</code></pre>

<p> NodeTypeName ::= '[' String ']'
 Supertypes ::= '>' (StringList | '?')
 NodeTypeAttribute ::= Orderable | Mixin | Abstract | Query | //OrderableはJCR2.0 23参照のこと</p>

<pre><code>                   PrimaryItem
</code></pre>

<p> Orderable ::= ('orderable' | 'ord' | 'o') ['?']
 Mixin ::= ('mixin' | 'mix' | 'm') ['?']
 Abstract ::= ('abstract' | 'abs' | 'a') ['?']
 Query ::= ('noquery' | 'nq') | ('query' | 'q' )
 PrimaryItem ::= ('primaryitem'| '!')(String | '?')
 PropertyDef ::= PropertyName [PropertyType] [DefaultValues]</p>

<pre><code>             [PropertyAttribute {PropertyAttribute}]
             [ValueConstraints]
</code></pre>

<p> PropertyName ::= '-' String
 PropertyType ::= '(' ('STRING' | 'BINARY' | 'LONG' | 'DOUBLE' |</p>

<pre><code>                   'BOOLEAN' | 'DATE' | 'NAME' | 'PATH' |
                   'REFERENCE' | 'WEAKREFERENCE' |
                   'DECIMAL' | 'URI' | 'UNDEFINED' | '*' |
                   '?') ')'
</code></pre>

<p> DefaultValues ::= '=' (StringList | '?')
 ValueConstraints ::= '&lt;' (StringList | '?')
 ChildNodeDef ::= NodeName [RequiredTypes] [DefaultType]</p>

<pre><code>              [NodeAttribute {NodeAttribute}]
</code></pre>

<p> NodeName ::= '+' String
 RequiredTypes ::= '(' (StringList | '?') ')'
 DefaultType ::= '=' (String | '?')
 PropertyAttribute ::= Autocreated | Mandatory | Protected |</p>

<pre><code>                   Opv | Multiple | QueryOps | NoFullText |
                   NoQueryOrder
</code></pre>

<p> NodeAttribute ::= Autocreated | Mandatory | Protected |</p>

<pre><code>               Opv | Sns                              // Opv == On-Parent-Version 3.7.2.5 参照
                                                      // Sns == Same-name-Siblings 22 参照
</code></pre>

<p> Autocreated ::= ('autocreated' | 'aut' | 'a' )['?']
 Mandatory ::= ('mandatory' | 'man' | 'm') ['?']
 Protected ::= ('protected' | 'pro' | 'p') ['?']
 Opv ::= 'COPY' | 'VERSION' | 'INITIALIZE' | 'COMPUTE' |</p>

<pre><code>     'IGNORE' | 'ABORT' | ('OPV' '?')
</code></pre>

<p> Multiple ::= ('multiple' | 'mul' | '*') ['?']
 QueryOps ::= ('queryops' | 'qop')</p>

<pre><code>          (('''Operator {','Operator}''') | '?')
</code></pre>

<p> Operator ::= '=' | '&lt;>' | '&lt;' | '&lt;=' | '>' | '>=' | 'LIKE'
 NoFullText ::= ('nofulltext' | 'nof') ['?']
 NoQueryOrder ::= ('noqueryorder' | 'nqord') ['?']
 Sns ::= ('sns' | '*') ['?']
 StringList ::= String {',' String}
 String ::= QuotedString | UnquotedString
 QuotedString ::= SingleQuotedString | DoubleQuotedString
 SingleQuotedString ::= ''' UnquotedString '''
 DoubleQuotedString ::= '"' UnquotedString '"'
 UnquotedString ::= XmlChar {XmlChar}
 XmlChar ::= see 3.2.2 Local Names
```</p>

<h1>ベースタイプ</h1>

<h2>nt:base</h2>

<p><code>nt:base</code>は全てのプライマリノードタイプのベースとなる抽象プライマリノードタイプである。これだけがスーパータイプを持たないプライマリノードである。
<code>text
[nt:base]
  abstract
  - jcr:primaryType (NAME) mandatory autocreated protected COMPUTE
  - jcr:mixinTypes (NAME) protected multiple COMPUTE
</code></p>

<h1>標準アプリケーションノードタイプ</h1>

<h2>nt:hierarchyNode</h2>

<p><code>nt:folder</code>と<code>nt:file</code>のスーパータイプとして使われる抽象ノードタイプである。
<code>
[nt:hierarchyNode] &gt; mix:created
  abstract
</code></p>

<h2>nt:file</h2>

<p>ファイルを表すノードタイプ。<code>nt:hierarchyNode</code>を継承しており、<code>jcr:content</code>という子ノードをひとつ必須とする。<code>jcr:content</code>は実際のファイルの内容を保持するために用いられる。この子要素は必須ではあるが、自動生成はされない。そのノードタイプはアプリケーション次第であり、ユーザーによって指定されなければならないからである。一般的なアプローチとしては、<code>jcr:cotent</code>を<code>nt:resource</code>ノードタイプにするというものである。また、<code>jcr:content</code>は親ノード(=nt:file)のプライマリアイテムとして指定されている。
<code>
[nt:file] &gt; nt:hierarchyNode
  primaryitem jcr:content
  + jcr:content (nt:base) mandatory
</code></p>

<h2>nt:linkedFile</h2>

<p><code>nt:file</code>に類似しているが、コンテンツノードは子ノードとして直接格納されず、REFERENCEプロパティとして指定されている。これによりコンテンツノードがワークスペースのどこかよそに格納しておくことを可能にし、それを複数の<code>nt:linkedFile</code>ノードで参照することを可能にする。このコンテンツノードは参照可能でなければならない。
<code>
[nt:linkedFile] &gt; nt:hierarchyNode
  primaryitem jcr:content
  - jcr:content (REFERENCE) mandatory
</code></p>

<h2>nt:folder</h2>

<p>このノードタイプはフォルダ、あるいはディレクトリを表現するために用いることができる。このノードタイプは<code>nt:hierarchyNode</code>で定義されているアイテムを継承しており、他の<code>nt:hierarchyNode</code>を子ノードとしていくつでも取ることができる。具体的に言えば、<code>nt:folder</code>, <code>nt:file</code>, <code>nt:linkedFile</code>の子ノードを持つことができるということである。
<code>
[nt:folder] &gt; nt:hierarchyNode
  + * (nt:hierarchyNode) VERSION
</code></p>

<h2>nt:resource</h2>

<p>このノードタイプはファイルの内容を表すのに用いられる。特に、<code>nt:file</code>のサブノードである<code>jcr:content</code>はしばしば<code>nt:resource</code>となる。
<code>
[nt:resource] &gt; mix:mimeType, mix:lastModified, mix:referenceable
  primaryitem jcr:data
  - jcr:data (BINARY) mandatory
</code></p>

<h2>mix:title</h2>

<p>このmixinノードタイプは標準化されたタイトルと説明プロパティをノードに付加するために用いられる。
<code>
[mix:title]
  mixin
  - jcr:title (STRING)
  - jcr:description (STRING)
</code></p>

<h2>mix:created</h2>

<p>このmixinノードタイプは標準化された作成情報をノードに付与するために用いられる。これらのプロパティはprotectedされているため、値はリポジトリによって制御されており、このmixinタイプが付与されたノードが最初に永続化される時に情報が適宜設定される。既に存在するノードに対してこのmixinが付与された場合の振舞いは実装に依る。Jackrabbitの場合は現在の日付とユーザーでプロパティを初期化する。
<code>
[mix:created]
  mixin
  - jcr:created (DATE) autocreated protected
  - jcr:createdBy (STRING) autocreated protected
</code></p>

<h2>mix:lastModified</h2>

<p>このmixinノードタイプはノードに標準化された更新情報を付与するために用いることができる。
JCR2.0スペックでは、「このプロパティは保護されているため値はリポジトリによって制御されており、このmixinを持つノードのサブグラフにおいて重大な改変があった場合には適切に値を設定しなければならない。重大な改変に相当するものはノードのサブグラフの意味によるため、実装依存とする。」とあるが、この部分についてはJackrabbitではまだ実装されていない。</p>

<p>Jackrabbitはノードが新規作成された場合このプロパティを現在の日付とユーザーで初期化する。</p>

<p>JSR-283で提案されていた、このプロパティに対する保護属性はこのバージョンでは除外されていることに注意。</p>

<p><code>
[mix:lastModified]
  mixin
  - jcr:lastModified (DATE) autocreated
  - jcr:lastModifiedBy (STRING) autocreated
</code></p>

<h2>mix:language</h2>

<p>あるノードのコンテンツが表現する自然言語を指定するための標準化されたプロパティを提供する。<code>jcr:language</code>プロパティの値は<a href="http://tools.ietf.org/html/rfc5646">RFC5646</a>で指定された言語コードでなければいけない。例：<code>en</code>（英語）、"en-US"（米国英語）、"de"（ドイツ語）、"de-CH"（スイスドイツ語）
<code>
[mix:language]
  mixin
  - jcr:language (STRING)
</code></p>

<h2>mix:mimeType</h2>

<p>このmixinノードタイプはノードに対する標準化されたMIMEタイプとエンコーディングプロパティを提供するために用いられる。このタイプのノードが単値のBINARYプロパティのプライマリアイテムを持っている場合<code>jcr:mymeType</code>プロパティはそのメディアタイプがコンテンツに適用可能であり、かつそのメディアがテキストエンコーディングの適用が可能であるものの場合は、<code>jcr:encoding</code>プロパティが適用すべきキャラクタ・セット情報を示す。ノードが上記の条件を満たさない場合の解釈は実装に依存する。
<code>
[mix:mimeType]
  mixin
  - jcr:mimeType (STRING)
  - jcr:encoding (STRING)
</code></p>

<h2>nt:address</h2>

<p>このノードタイプは、特定のワークスペース内だけでなく、全てのJCRリポジトリの全てのワークスペース内にあるJCRアイテムの場所を表すことができる。<code>jcr:protocol</code>, <code>jcr:host</code>, <code>jcr:port</code>についてのセマンティクスは定義されておらず、アプリケーション側が理解できるものとする。</p>

<p>多くの場合、<code>jcr:path</code>か<code>jcr:id</code>のどちらかだけを用いて、この二つが違うノードを示すことを防ぐ。<code>jcr:path</code>と<code>jcr:id</code>以外のプロパティが欠けている場合、このアドレスは欠けているプロパティを現在いるレベルの値であるとして相対的に解釈する。例えば、もしリポジトリが指定されなければ現在のリポジトリ内での相対的なworkspaceとパスであると解釈される。
<code>
[nt:address]
  - jcr:protocol (STRING)
  - jcr:host (STRING)
  - jcr:port (STRING)
  - jcr:repository (STRING)
  - jcr:workspace (STRING)
  - jcr:path (PATH)
  - jcr:id (WEAKREFERENCE)
</code></p>

<h2>mix:etag</h2>

<p><code>mix:etag</code> mixinタイプはBINARYプロパティ用に標準化された、HTTP/1.1のentity tagと同様のアイデンティティ・バリデータを提供する。
<code>jcr:etag</code>はHTTP/1.1のentity tagsと同一の文法を持つ隠し文字列である。<code>mix:etag</code>を持つノードNを作成した際、リポジトリは<code>jcr:etag</code>プロパティに実装が決定した値をセットする。</p>

<p><code>jcr:etag</code>の値はNに下記の変更が加えられた際には即座に変更されることになっている。</p>

<ul>
<li>あるBINARYプロパティがNに追加される。</li>
<li>あるBINARYプロパティがNから削除される。</li>
<li>既存のBINARYプロパティの値が変更される。</li>
</ul>


<p><code>
[mix:etag]
  mixin
  - jcr:etag (STRING) protected autocreated
</code></p>

<h1>非構造化コンテンツ</h1>

<h2>nt:unstructured</h2>

<p>このノードタイプは非構造化コンテンツを格納するために用いられる。任意の名前のプロパティをいくつでも保持することができる。複数のノードが同名を取ることも可能であるし、あるプロパティが複数の値をとることも、１つの値を取ることも自由である。このノードタイプはクライアント側の順序付け子ノードもサポートしている。
<code>
[nt:unstructured]
  orderable
  - * (UNDEFINED) multiple
  - * (UNDEFINED)
  + * (nt:base) = nt:unstructured sns VERSION
</code></p>

<h1>参照</h1>

<h2>mix:referenceable</h2>

<p>このノードタイプは、自動生成で、必須、保護されたSTRINGプロパティ<code>jcr:uuid</code>をノードに付与する。これはノードの識別子として用いられる。”UUID"という語はJCR1.0への後方互換性のために用いられており、必ずしもUUID文法を使うことを意味してはいないことに注意。参照可能ノードの識別子は参照可能な識別子でなければならない。参照可能な識別子は標準の識別子に要求される要件いアギに様々な制約を満たしていなければならない。（詳細は3.8.3 参照可能識別子を参照）参照プロパティは参照可能ノードの参照可能識別子を持つプロパティであり、結果としてそのノードへのポインターとして用いられる。<code>REFERENCE</code>と<code>WEAKREFERENCE</code>は前者が参照整合性を必要とするのに対し後者は不要であるという点が異なる。
<code>
[mix:referenceable]
  mixin
  - jcr:uuid (STRING) mandatory autocreated protected INITIALIZE
</code></p>

<h1>ロッキング</h1>

<h2>mix:lockable</h2>

<p><code>
[mix:lockable]
  mixin
  - jcr:lockOwner (STRING) protected IGNORE
  - jcr:lockIsDeep (BOOLEAN) protected IGNORE
</code></p>

<h1>共有可能ノード</h1>

<h2>mix:shareable</h2>

<p><code>
[mix:shareable] &gt; mix:referenceable
  mixin
</code></p>

<h1>バージョニング</h1>

<h2>mix:simpleVersionable</h2>

<p><code>
[mix:simpleVersionable]
  mixin
  - jcr:isCheckedOut (BOOLEAN) = 'true' mandatory autocreated protected IGNORE
</code></p>

<h2>mix:versionable</h2>

<p>```
[mix:versionable] > mix:simpleVersionable, mix:referenceable
  mixin
  - jcr:versionHistory (REFERENCE) mandatory protected IGNORE &lt; 'nt:versionHistory'
  - jcr:baseVersion (REFERENCE) mandatory protected IGNORE &lt; 'nt:version'
  - jcr:predecessors (REFERENCE) mandatory protected multiple IGNORE &lt; 'nt:version'
  - jcr:mergeFailed (REFERENCE) protected multiple ABORT &lt; 'nt:version'</p>

<pre><code>/** @since 2.0 */
</code></pre>

<ul>
<li>jcr:activity (REFERENCE) protected &lt; 'nt:activity'
/<em>* @since 2.0 </em>/</li>
<li>jcr:configuration (REFERENCE) protected IGNORE &lt; 'nt:configuration'
```</li>
</ul>


<h2>nt:versionHistory</h2>

<p>```
[nt:versionHistory] > mix:referenceable
  - jcr:versionableUuid (STRING) mandatory autocreated protected ABORT</p>

<pre><code>/** @since 2.0 */
</code></pre>

<ul>
<li>jcr:copiedFrom (WEAKREFERENCE) protected ABORT &lt; 'nt:version'</li>
<li>jcr:rootVersion (nt:version) = nt:version mandatory autocreated protected ABORT</li>
<li>jcr:versionLabels (nt:versionLabels) = nt:versionLabels mandatory autocreated protected ABORT</li>
<li><ul>
<li>(nt:version) = nt:version protected ABORT
```</li>
</ul>
</li>
</ul>


<h2>nt:versionLables</h2>

<p>```
[nt:versionLabels]
  - * (REFERENCE) protected ABORT &lt; 'nt:version'
[nt:version] > mix:referenceable
  - jcr:created (DATE) mandatory autocreated protected ABORT
  - jcr:predecessors (REFERENCE) protected multiple ABORT &lt; 'nt:version'
  - jcr:successors (REFERENCE) protected multiple ABORT &lt; 'nt:version'</p>

<pre><code>/** @since 2.0 */
</code></pre>

<ul>
<li>jcr:activity (REFERENCE) protected ABORT &lt; 'nt:activity'</li>
<li>jcr:frozenNode (nt:frozenNode) protected ABORT
```</li>
</ul>


<h2>nt:frozenNode</h2>

<p><code>
[nt:frozenNode] &gt; mix:referenceable
  orderable
  - jcr:frozenPrimaryType (NAME) mandatory autocreated protected ABORT
  - jcr:frozenMixinTypes (NAME) protected multiple ABORT
  - jcr:frozenUuid (STRING) mandatory autocreated protected ABORT
  - * (UNDEFINED) protected ABORT
  - * (UNDEFINED) protected multiple ABORT
  + * (nt:base) protected sns ABORT
</code></p>

<h2>nt:versionChild</h2>

<p><code>
[nt:versionedChild]
  - jcr:childVersionHistory (REFERENCE) mandatory autocreated protected ABORT &lt; 'nt:versionHistory'
</code></p>

<h2>nt:activity</h2>

<p><code>
[nt:activity] &gt; mix:referenceable
  - jcr:activityTitle (STRING) mandatory autocreated protected
</code></p>

<h2>nt:configuration</h2>

<p><code>
[nt:configuration] &gt; mix:versionable
  - jcr:root (REFERENCE) mandatory autocreated protected
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackrabbit OCM status]]></title>
    <link href="http://k2n.github.com/blog/2012/05/31/jackrabbit-ocm-status/"/>
    <updated>2012-05-31T15:16:00-07:00</updated>
    <id>http://k2n.github.com/blog/2012/05/31/jackrabbit-ocm-status</id>
    <content type="html"><![CDATA[<p>2012年5月末時点で最新のjackrabbit-ocmリリースは1.5.3である。Jackrabbit本体のバージョン(2.4.1)からは大きくかけ離れているが、これは、ocmはjakarta-commonsのサブプロジェクトとして、jackrabbit本体とは別のライフサイクルでリリースされているためである。OCMはJCRのみに依存しており、Jackrabbitの実装への依存性がほぼないことから、このような扱いとなっている。</p>

<p>とはいえ、仕様が古くなっている点も散見される。例えばノードの取得時に、JCR2.0では非推奨になっているUUIDを用いており、このような点は修正される必要がある。</p>

<p>2012年5月より、OCMの開発を再開する動きがでており、jackrabbit-ocmのtrunkコードベースはバージョン2.0-SNAPSHOTとなり、コードの更新が再開されている。</p>

<ul>
<li>JIRA: https://issues.apache.org/jira/browse/OCM</li>
<li>Svn:  http://svn.apache.org/viewvc/jackrabbit/commons/ocm/</li>
<li>Forked source on Github: https://github.com/k2n/jackrabbit-ocm</li>
</ul>

]]></content>
  </entry>
  
</feed>
